# -*- Python -*-
[surf_eval]
# Evaluate surface on a regular grid in WGS84 coordinates.
# Points outside the valid boundaries are given a fill value.

# Output options.
# We only want text output, since VTK output wouldn't work very well in
# geographic coordinates.
output_txt = True
output_vtk = False

# Output filenames.
# We really only need to provide the text filename since we aren't
# requesting VTK output.
output_txt_file = grid_fill_wgs84.txt
output_vtk_file = grid_fill_wgs84.vtk

# Coordinate conversion.
# We can choose to leave things in the local coordinate system used for the
# surface fitting, or use the coordinate system in which the sample points
# are defined (defined below).
coord_convert = True

# Out-of-range option.
# We choose to include points that lie outside the valid region, and
# fill invalid entries with the specified fill value.
out_of_range_option = fill_with_fill_val
# The default fill value is nan, and we retain this value.
out_of_range_fill_val = nan

# Sample definition.
# We create a regular grid of points in WGS84 coordinates.
# Note that points which fall outside the valid boundary will be
# filled with the fill value.
# Note that this is fairly fine spacing (0.01 degree). If you want a smaller
# output file, you could reduce this to 501 x 451.
sample_method = rectilinear
sample_x_min = 170.0
sample_y_min = -45.0
sample_x_max = 180.0
sample_y_max = -36.0
sample_num_x = 1001
sample_num_y = 901
sample_coordsys = +proj=lonlat +ellps=WGS84 +datum=WGS84 +towgs84=0.0,0.0,0.0

# Scaling factor for interface elevation.
# We are converting meters to km.
z_scale = 1.0e-3

# Compute normal vector.
# The normal vector probably doesn't make much sense in geographic
# coordinates.
compute_normal = False
